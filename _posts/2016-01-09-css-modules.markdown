---
layout: post
title:  "A Quick Look at CSS Modules"
date:   2016-01-07 23:11:43 +1100
categories: css front-end
---
When first hearing [CSS Modules](https://github.com/css-modules/css-modules), my reaction was "Alright, that's cool but **why** do I need it?"

###What's wrong with CSS
To understand CSS modules, we must understand the current problem of CSS. The biggest problem, in my opinion is that CSS has only one namespace, i.e. the **global namespace**.
For example, consider the HTML snippet below.
{% highlight html %}
<div class="song">
  <div class="name">Holiday</div>
  <div class="description">A song by GreenDay</div>
</div>
{% endhighlight %}
Now we want to style it, and a naive CSS snippet may look like this.
{% highlight css %}
.song {
  border: 1px solid #f2f2f2;
  padding: 5px;
  text-align: center;
}

.name {
  font-size: 1.5rem;
}

.description {
  color: gray;
}
{% endhighlight %}
It looks all good so far, until your boss comes around and asks you to add another HTML snippet for article like below.
{% highlight html %}
<div class="article">
  <div class="name">React Tutorial</div>
  <div class="description">Teaching you how to write React</div>
</div>
{% endhighlight %}
Now we have a clash between `.name, .description` for **song** and `.name, .description` for **article**, due to the fact that CSS is **globally namespaced**. To solve this problem, we can add ancestry in our css selectors, for example:
{% highlight css %}
.song {
  border: 1px solid #f2f2f2;
  padding: 5px;
  text-align: center;
}

.song .name {
  font-size: 1.5rem;
}

.song .description {
  color: gray;
}
{% endhighlight %}
Now we have `.song > .name, .song > .description` and `.article > .name, .article > .description`, which makes browser able to tell which is which.

Another way to solve this problem is to use [BEM](https://css-tricks.com/bem-101/).

However, both of these approaches could be fairly tedious as your project grows, and to be honest, they're hacking to fight against global namespace.

###How does CSS modules come to aid?
CSS modules takes a different path to tackle the problem. With CSS modules, you can safely write CSS for both **song** and **article** in a more natural way.

**song.css**
{% highlight css %}
.item {
  /* code omitted */
}

.name {
  /* code omitted */
}

.description {
  /* code omitted */
}
{% endhighlight %}

**article.css**
{% highlight css %}
.item {
  /* code omitted */
}

.name {
  /* code omitted */
}

.description {
  /* code omitted */
}
{% endhighlight %}

Now how do we differentiate between **song** and **article**? If you think about it, at the very top level, we know `.name` and `.description` can come from different files, i.e. `song.css` and `article.css`, so by looking at file names, we already know which is which. In css modules, we **import** styles from **different** files to let the computer know what CSS we want to apply.
{% highlight javascript %}
import styles from 'song.css'
{% endhighlight %}

A more detailed example is written below. Please ignore the React part and only focus on the HTML we intend to output.
{% highlight javascript %}
import React from 'react';
import ReactDOM from 'react-dom';
import songStyles from '../styles/song.css';
import articleStyles from '../styles/article.css';

window.onload = () => {
  ReactDOM.render(
    <div>
      <div className={songStyles.item}>
        <div className={songStyles.name}>Holiday</div>
        <div className={songStyles.description}>A song by GreenDay</div>
      </div>
      <div className={articleStyles.item}>
        <div className={articleStyles.name}>React Tutorial</div>
        <div className={articleStyles.description}>Teaching you how to write React</div>
      </div>
    </div>
  , document.getElementById('root'));
};
{% endhighlight %}

By having a look at the HTML generated by the code above, you'll find the previous `.song > .name` now becomes name like this `song__name___3kysw`, which is guaranteed to be globally unique. Same goes for `.song > .description` becoming `song__description___2Q-46`, `.article > .name` become `article__name___58-4X` etc.

###Conclusion
By comparing global CSS with CSS modules, we can notice that CSS modules frees you from all kinds of naming conventions, such allowing you to write CSS in a more natural and simple way. This means you don't need to manually namespace your classes; the **file names** are your **namespaces**.

However, by using CSS modules, you are forced to write CSS in JavaScript, which might not suite everyone's needs. Thus, you don't **HAVE** to use it and there is aboslutely no fault to continue using global CSS.

There're tools that help you build CSS modules. You can choose [Webpack](https://webpack.github.io/) or [Gulp](http://gulpjs.com/). I recommend you start with Webpack, since it is the current trending and has a big community.
